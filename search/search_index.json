{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About cmf-cli","text":"<p>cmf-cli is a Command Line Interface used for Critical Manufacturing developments.</p>"},{"location":"#use-cmf-cli-to","title":"Use cmf-cli to . . .","text":"<ul> <li>Scaffold a new repository</li> <li>Generate new package structures</li> <li>Adapt packages of code for Critical Manufacturing MES</li> <li>Manage multiple versions of packages and package dependencies</li> <li>Create packages that can be used by any developer or customer</li> <li>View the package tree</li> <li>Restore packages for local development</li> <li>Assemble a release bundle</li> </ul> <p>and a lot more!</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>To get started with cmf-cli, you need to use the command line interface (CLI) to install cmf-cli. We look forward to seeing what you create!</p>"},{"location":"install/","title":"Installation","text":"<p>To be able to install cfm-cli, you must install Node.js and the npm command line interface using either a Node version manager or a Node installer. We strongly recommend using a Node version manager like nvm to install Node.js and npm. We do not recommend using a Node installer, since the Node installation process installs npm in a directory with local permissions and can cause permissions errors when you run npm packages globally.</p> <pre><code>npm install --global @criticalmanufacturing/cli\n</code></pre>"},{"location":"install/#checking-your-version-of-cmf-cli-and-nodejs","title":"Checking your version of cmf-cli and Node.js","text":"<p>To see if you already have Node.js and npm installed and check the installed version, run the following commands:</p> <pre><code>node -v\ncmf -v\n</code></pre>"},{"location":"plugins/","title":"Plugins","text":"<p>The Critical Manufacturing cli is designed with a plugin system for extensibility. In the future, it will be possible to search for plugins straight from cli.</p> <p>In the meanwhile, some plugins are already in development. Here follows a non-exaustive plugin list:</p> <ul> <li>Portal SDK - command line tools to interact with the Critical Manufacturing Customer Portal</li> </ul>"},{"location":"telemetry/","title":"Telemetry","text":""},{"location":"telemetry/#telemetry-implementation","title":"Telemetry implementation","text":"<p>Basic telemetry currently only tracks the CLI startup and logs:</p> <ul> <li>CLI name and version</li> <li>latest version available in NPM</li> <li>if the CLI version is stable or testing</li> <li>if the CLI is outdated</li> </ul> <p>no identifiable information is collected in basic telemetry</p> <p>However, any user can optionally enable extended telemetry, which might help with troubleshooting. Extended telemetry includes identifiable information and as such should be used with care. This includes the basic telemetry, plus:</p> <ul> <li>for the version (startup) log, it also includes<ul> <li>current working directory</li> <li>hostname</li> <li>IP</li> <li>username</li> </ul> </li> </ul> <p>It also tracks and logs the package tree if, for any command, the tree must be computed. This includes all of the above information plus the package name, for each package in the tree.</p> <p>Enabling telemetry can be done via environment variables:</p> <ul> <li><code>cmf_cli_enable_telemetry</code> - enable basic telemetry. If this is off (the default), no telemetry will be collected, even if extended telemetry is on. To enable, set to <code>true</code> or <code>1</code>, do not set or set to <code>false</code> or <code>0</code> to disable.</li> <li><code>cmf_cli_enable_extended_telemetry</code> - enable extended telemetry. Note the above warnings regarding the impact of keeping this on. To enable, set to <code>true</code> or <code>1</code>, do not set or set to <code>false</code> or <code>0</code> to disable.</li> <li><code>cmf_cli_telemetry_enable_console_exporter</code> - also print the telemetry information to the console. This is for auditing or troubleshooting as it makes the console output extremely verbose</li> <li><code>cmf_cli_telemetry_host</code> - specify an alternate telemetry endpoint (if you're hosting your own)</li> </ul>"},{"location":"reference/api/cmfpackage.json/","title":"cmfpackage.json","text":"<p>This document is all you need to know about what's required in your cmfpackage.json file.</p>"},{"location":"reference/api/cmfpackage.json/#packageid","title":"packageId","text":"<p>The most important things in your cmfpackage.json are the packageId and version fields as they will be required. The packageId and version together form an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version.</p> <p>The packageId is automatically generated when the package is created via the <code>cmf new</code> and by default contains the packageType (eg: Cmf.Feature.Business).</p>"},{"location":"reference/api/cmfpackage.json/#version","title":"version","text":"<p>The most important things in your cmfpackage.json are the packageId and version fields as they will be required. The packageId and version together form an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version.</p> <p>Version must be parseable by node-semver.</p>"},{"location":"reference/api/cmfpackage.json/#description","title":"description","text":"<p>Put a description in it.  It's a string.</p>"},{"location":"reference/api/cmfpackage.json/#packagetype","title":"packageType","text":"<p>The packageType is defined via an Enum, check all the valid values here.</p>"},{"location":"reference/api/cmfpackage.json/#isinstallable","title":"isInstallable","text":"<p>Boolean value (default true). A value of true indicates that the package is prepared to be installed. This value is usually only false for packages of type Tests.</p>"},{"location":"reference/api/cmfpackage.json/#isuniqueinstall","title":"isUniqueInstall","text":"<p>Boolean value (default false). A value of true indicates that the package is only installed once per environment, a second run of this package doesn't re-install it. This value is usually only true for packages of type Data, IoTData and Database.</p>"},{"location":"reference/api/cmfpackage.json/#istosetdefaultsteps","title":"isToSetDefaultSteps","text":"<p>Boolean value (default true). A value of true indicates that a set of predefined steps (each packageType has a set of steps) will be used. This value is usually only false when some debug is needed or for some reason the default steps are not working as expected.</p>"},{"location":"reference/api/cmfpackage.json/#steps","title":"steps","text":"<p>The <code>steps</code> field is an array of steps that will be executed during the package deployment. This is by default empty, because each package type has a set of predefined steps. This field is very useful when you want to add steps to be executed after the predefined or when combined with the property <code>isToSetDefaultSteps</code> as false you can override all the predefined steps.</p> <p>Example: <pre><code>{\n    \"packageId\": \"Cmf.Custom.Data\",\n    \"version\": \"1.1.0\",\n    \"description\": \"Cmf Custom Data Package\",\n    \"packageType\": \"Data\",\n    \"isInstallable\": true,\n    \"isUniqueInstall\": true,\n    \"steps\": [\n    {\n        \"type\":\"Generic\",\n        \"onExecute\":\"scriptToRun.ps1\"\n    }]\n}\n</code></pre></p>"},{"location":"reference/api/cmfpackage.json/#contenttopack","title":"contentToPack","text":"<p>The <code>contentToPack</code> field is an array of file patterns (source and target, check below) that describes the files and folders to be included when your package is packed. File patterns follow a similar syntax to .gitignore, but reversed: including a file, directory, or glob pattern (*, **/*, and such) will make it so that file is included in the zip when it's packed.</p> <p>Some special files and directories are also included or excluded regardless of whether they exist in the files array (see here).</p> <p>You can also provide a <code>.cmfpackageignore</code> file, which will keep files from being included.</p> <p>Properties:</p> <p>The properties source and target have support for token replacement of any property of the cmfpackage. Example: <pre><code>{\n  \"packageId\": \"Cmf.Custom.Database.Post\",\n  \"version\": \"1.1.0\",\n  \"description\": \"Cmf Custom Database Post Scripts Package\",\n  \"packageType\": \"Database\",\n  \"isInstallable\": true,\n  \"isUniqueInstall\": false,\n  \"contentToPack\": [\n    {\n      \"source\": \"Online/$(version)/*\",\n      \"target\": \"Online/$(version)\"\n    }\n  ]\n}\n</code></pre> This means that the contentToPack will look in to the folder <code>/Online/1.1.0</code>.</p>"},{"location":"reference/api/cmfpackage.json/#source","title":"source","text":"<p>File pattern where the files/directories to pack are located (relative to the <code>cmfpackage.json</code>).</p>"},{"location":"reference/api/cmfpackage.json/#target","title":"target","text":"<p>File pattern where the files/directories should be placed in the zip.</p>"},{"location":"reference/api/cmfpackage.json/#contenttype","title":"contentType","text":"<p>Usually used in packages of Type Data. Defined via an Enum, check all the valid values here.</p>"},{"location":"reference/api/cmfpackage.json/#ignorefiles","title":"ignoreFiles","text":"<p>File pattern that should point to <code>.cmfpackageignore</code> files.</p>"},{"location":"reference/api/cmfpackage.json/#action","title":"action","text":"<p>Action that will occur during the packing. Defined via an Enum, check all the valid values here.</p>"},{"location":"reference/api/cmfpackage.json/#dependencies","title":"dependencies","text":"<p>Dependencies are specified in an array of a simple object that maps a packageId to a version. It can point to a local dependency (in the same repo) or to a remote dependency (in a remote repo).</p> <p>Remote dependencies depend on remote repos(currently we only support folders), these repos are defined in the file <code>repositories.json</code></p> <p>Example: <pre><code>{\n    \"packageId\": \"Cmf.Custom.Data\",\n    \"version\": \"1.1.0\",\n    \"description\": \"Cmf Custom Data Package\",\n    \"packageType\": \"Data\",\n    \"isInstallable\": true,\n    \"isUniqueInstall\": true,\n    \"dependencies\": [\n    {\n      \"id\": \"Cmf.Custom.Business\",\n      \"version\": \"1.0.0\"\n    }]\n}\n</code></pre></p>"},{"location":"reference/api/cmfpackage.json/#relatedpackages","title":"relatedPackages","text":"<p>In some cases, you want to guarantee that a set packages are built or packed together. To do this you just need to add this property, point to the relativePath of the package and define when it should be build or packed. Example: <pre><code>{\n    \"packageId\": \"Cmf.Custom.Data\",\n    \"version\": \"1.1.0\",\n    \"description\": \"Cmf Custom Data Package\",\n    \"packageType\": \"Data\",\n    \"isInstallable\": true,\n    \"isUniqueInstall\": true,\n    \"relatedPackages\": [\n    {\n        \"path\": \"../Cmf.Custom.Business\",\n        \"preBuild\": true,\n        \"postBuild\": false,\n        \"prePack\": false,\n        \"postPack\": false\n    }]\n}\n</code></pre></p>"},{"location":"reference/api/cmfpackage.json/#testpackages","title":"testPackages","text":"<p>Just like the <code>dependencies</code> property, the <code>testPackages</code> are specified in an array of a simple object that maps a packageId to a version. This is useful to link packages of type Tests, to any other packages. This allow the <code>cmf assemble</code> command to assemble it together with the relative package.</p>"},{"location":"reference/api/cmfpackage.json/#generic-type-packages","title":"Generic Type Packages","text":"<p>This type doesn't have any predefined BuildStep, Step or ContentToPack, so it will completely rely on what is defined to know how it should be built, packed and deployed. Check the above properties that are only available for this PackageType.</p>"},{"location":"reference/api/cmfpackage.json/#buildsteps","title":"buildSteps","text":"<p>Array of terminal commands (similar to package.json scripts) that will be used to build the package during the <code>cmf build</code> command execution.</p> <p>Example: <pre><code>\"buildSteps\": [\n{\n    \"args\": [\"build -c Release\"],\n    \"command\": \"dotnet\",\n    \"workingDirectory\": \".\"\n}\n</code></pre></p>"},{"location":"reference/api/cmfpackage.json/#dfpackagetype","title":"dFPackageType","text":"<p>The dfPackageType is defined via an Enum, check all the valid values here.</p>"},{"location":"reference/api/cmfpackage.json/#targetlayer","title":"targetLayer","text":"<p>String value that should match a container layer from CM Framework. Valid values should be checked in the official documentation here.</p>"},{"location":"reference/api/cmfpackage.json/#example","title":"Example","text":"<pre><code>{\n    \"packageId\": \"Cmf.Custom.Generic.Package\",\n    \"version\": \"1.0.0\",\n    \"description\": \"Generic Package\",\n    \"packageType\": \"Generic\",\n    \"dfPackageType\": \"Business\",\n    \"targetLayer\": \"host\",\n    \"isInstallable\": true,\n    \"isUniqueInstall\": false,\n    \"buildSteps\": [\n    {\n        \"args\": [\n        \"build -c Release\"\n        ],\n        \"command\": \"dotnet\",\n        \"workingDirectory\": \".\"\n    }\n    ],\n    \"contentToPack\": [\n    {\n        \"source\": \"Release/netcoreapp3.1/*.*\",\n        \"target\": \"\"\n    }],\n    \"steps\": [\n    {\n        \"type\": \"DeployFiles\",\n        \"contentPath\": \"**/**\"\n    }]\n}\n</code></pre>"},{"location":"reference/api/cmfpackage.json/contenttype/","title":"ContentType","text":"<ul> <li>Generic (default)</li> <li>MasterData</li> <li>ProcessRulesPre</li> <li>ProcessRulesPost</li> <li>EntityTypes</li> <li>ChecklistImages</li> <li>Documents</li> <li>Maps</li> <li>AutomationWorkFlows</li> <li>ExportedObjects</li> </ul>"},{"location":"reference/api/cmfpackage.json/defaultcontenttoignore/","title":"DefaultContentToIgnore","text":""},{"location":"reference/api/cmfpackage.json/defaultcontenttoignore/#html","title":"Html","text":"<ul> <li><code>node_modules</code></li> <li><code>test</code></li> <li><code>*.ts</code></li> <li><code>node.exe</code></li> <li><code>CompileProject.ps1</code></li> <li><code>node_modules_cache.zip</code></li> </ul>"},{"location":"reference/api/cmfpackage.json/defaultcontenttoignore/#iot","title":"IoT","text":"<ul> <li><code>gulpfile.js</code></li> <li><code>package-lock.json</code></li> <li><code>package.json</code></li> <li><code>packConfig.json</code></li> <li><code>README.md</code></li> </ul>"},{"location":"reference/api/cmfpackage.json/packaction/","title":"PackAction","text":"<ul> <li>Pack (default)</li> <li>Transform <pre><code>Use the source content to apply a transformation to another file.\nThis currently doesn't use the Target property, as it is handler dependent.\n</code></pre></li> <li>Untar <pre><code>Use the source content to apply untar the file to a target destination.\nThis currently handler dependent (IoT Package).\n</code></pre></li> </ul>"},{"location":"reference/api/cmfpackage.json/packagetype/","title":"PackageType","text":"<ul> <li>Root</li> <li>Generic</li> <li>Business</li> <li>Data</li> <li>HTML</li> <li>Help</li> <li>IoT</li> <li>Reporting</li> <li>ExportedObjects</li> <li>Database</li> <li>IoTData</li> <li>Tests</li> <li>SecurityPortal</li> </ul>"},{"location":"reference/api/repositories.json/","title":"repositories.json","text":"<p>This document is all you need to know about what's required in your repositories.json file.</p>"},{"location":"reference/api/repositories.json/#cirepository","title":"CIRepository","text":"<p>Path that points to a folder that contain packages that are treat as Continuous Integration packages.</p>"},{"location":"reference/api/repositories.json/#repositories","title":"Repositories","text":"<p>Array of paths that point to folders that contain package that are treat as official (i.e. upstream dependencies or already releases packages).</p> <p>Example: <pre><code>{\n    \"CIRepository\": \"\\\\\\\\fileshare\\\\my-continuous-integration\\\\packages\\\\repository\",\n    \"Repositories\": [\n        \"\\\\\\\\fileshare\\\\my-official\\\\packages\\\\repository\",\n        \"\\\\\\\\fileshare\\\\my-released\\\\packages\\\\repository\"\n    ]\n}\n</code></pre></p>"},{"location":"reference/commands/assemble/","title":"assemble","text":""},{"location":"reference/commands/assemble/#description","title":"Description","text":"<p>cmf assemble is a command that will read all the dependencies of a given package of type Root, and assemble it together.</p> <p>If a <code>repositories.json</code> file is available in the working directory, the repos will be also read from that file.</p> <p>The command will copy all defined dependencies from the repos, and paste it on the defined outputDir. If the package is not found, and error is thrown.</p> <p>Run <code>cmf assemble -h</code> to get a list of available arguments and options.</p>"},{"location":"reference/commands/assemble/#usage","title":"Usage","text":"<pre><code>cmf assemble [options] [&lt;workingDir&gt;]\n</code></pre>"},{"location":"reference/commands/assemble/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: .]"},{"location":"reference/commands/assemble/#options","title":"Options","text":"Name Description <code>-o, --outputDir &lt;outputDir&gt;</code> Output directory for assembled package [default: Assemble] <code>--cirepo &lt;cirepo&gt;</code> Repository where Continuous Integration packages are located (url or folder) <code>-r, --repo, --repos &lt;repos&gt;</code> Repository or repositories where published dependencies are located (url or folder) <code>--includeTestPackages</code> Include test packages on assemble <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/build/","title":"build","text":""},{"location":"reference/commands/build/#usage","title":"Usage","text":"<pre><code>cmf build [options] [&lt;packagePath&gt;] [command]\n</code></pre>"},{"location":"reference/commands/build/#arguments","title":"Arguments","text":"Name Description <code>&lt;packagePath&gt;</code> Package Path [default: .]"},{"location":"reference/commands/build/#options","title":"Options","text":"Name Description <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/build/#commands","title":"Commands","text":"Name Description <code>help</code>"},{"location":"reference/commands/build_help/","title":"build help","text":""},{"location":"reference/commands/build_help/#usage","title":"Usage","text":"<pre><code>cmf build [&lt;packagePath&gt;] help [options] [command]\n</code></pre>"},{"location":"reference/commands/build_help/#arguments","title":"Arguments","text":"Name Description <code>&lt;packagePath&gt;</code> Package Path [default: .]"},{"location":"reference/commands/build_help/#options","title":"Options","text":"Name Description <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/build_help/#commands","title":"Commands","text":"Name Description <code>generateBasedOnTemplates</code> <code>generateMenuItems</code>"},{"location":"reference/commands/build_help_generateBasedOnTemplates/","title":"build help generateBasedOnTemplates","text":""},{"location":"reference/commands/build_help_generateBasedOnTemplates/#usage","title":"Usage","text":"<pre><code>cmf build [&lt;packagePath&gt;] help generateBasedOnTemplates [options]\n</code></pre>"},{"location":"reference/commands/build_help_generateBasedOnTemplates/#options","title":"Options","text":"Name Description <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/build_help_generateMenuItems/","title":"build help generateMenuItems","text":""},{"location":"reference/commands/build_help_generateMenuItems/#usage","title":"Usage","text":"<pre><code>cmf build [&lt;packagePath&gt;] help generateMenuItems [options]\n</code></pre>"},{"location":"reference/commands/build_help_generateMenuItems/#options","title":"Options","text":"Name Description <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/bump/","title":"bump","text":""},{"location":"reference/commands/bump/#usage","title":"Usage","text":"<pre><code>cmf bump [options] [&lt;packagePath&gt;] [command]\n</code></pre>"},{"location":"reference/commands/bump/#arguments","title":"Arguments","text":"Name Description <code>&lt;packagePath&gt;</code> Package path [default: .]"},{"location":"reference/commands/bump/#options","title":"Options","text":"Name Description <code>-v, --version &lt;version&gt;</code> Will bump all versions to the version specified <code>-b, --buildNr &lt;buildNr&gt;</code> Will add this version next to the version (v-b) <code>-r, --root &lt;root&gt;</code> Will bump only versions under a specific root folder (i.e. 1.0.0) <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/bump/#commands","title":"Commands","text":"Name Description <code>iot</code>"},{"location":"reference/commands/bump_iot/","title":"bump iot","text":""},{"location":"reference/commands/bump_iot/#usage","title":"Usage","text":"<pre><code>cmf bump [&lt;packagePath&gt;] iot [options] [command]\n</code></pre>"},{"location":"reference/commands/bump_iot/#arguments","title":"Arguments","text":"Name Description <code>&lt;packagePath&gt;</code> Package path [default: .]"},{"location":"reference/commands/bump_iot/#options","title":"Options","text":"Name Description <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/bump_iot/#commands","title":"Commands","text":"Name Description <code>configuration &lt;path&gt;</code> [default: .] <code>customization &lt;packagePath&gt;</code> [default: .]"},{"location":"reference/commands/bump_iot_configuration/","title":"bump iot configuration","text":""},{"location":"reference/commands/bump_iot_configuration/#usage","title":"Usage","text":"<pre><code>cmf bump [&lt;packagePath&gt;] iot configuration [options] [&lt;path&gt;]\n</code></pre>"},{"location":"reference/commands/bump_iot_configuration/#arguments","title":"Arguments","text":"Name Description <code>&lt;path&gt;</code> Working Directory [default: .]"},{"location":"reference/commands/bump_iot_configuration/#options","title":"Options","text":"Name Description <code>-v, --version &lt;version&gt;</code> Will bump all versions to the version specified <code>-b, --buildNrVersion &lt;buildNrVersion&gt;</code> Will add this version next to the version (v-b) <code>-md, --masterData</code> Will bump IoT MasterData version (only applies to .json) [default: False] <code>-iot</code> Will bump IoT Automation Workflows [default: True] <code>-pckNames, --packageNames &lt;packageNames&gt;</code> Packages to be bumped <code>-r, --root &lt;root&gt;</code> Specify root to specify version where we want to apply the bump <code>-g, --group &lt;group&gt;</code> Group of workflows to change, typically they are grouped by Automation Manager <code>-wkflName, --workflowName &lt;workflowName&gt;</code> Specific workflow to be bumped <code>-isToTag</code> Instead of replacing the version will add -$version [default: False] <code>-mdCustomization</code> Instead of replacing the version will add -$version [default: False] <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/bump_iot_customization/","title":"bump iot customization","text":""},{"location":"reference/commands/bump_iot_customization/#usage","title":"Usage","text":"<pre><code>cmf bump [&lt;packagePath&gt;] iot customization [options] [&lt;packagePath&gt;]\n</code></pre>"},{"location":"reference/commands/bump_iot_customization/#arguments","title":"Arguments","text":"Name Description <code>&lt;packagePath&gt;</code> Package Path [default: .]"},{"location":"reference/commands/bump_iot_customization/#options","title":"Options","text":"Name Description <code>-v, --version &lt;version&gt;</code> Will bump all versions to the version specified <code>-b, --buildNrVersion &lt;buildNrVersion&gt;</code> Will add this version next to the version (v-b) <code>-pckNames, --packageNames &lt;packageNames&gt;</code> Packages to be bumped <code>-isToTag</code> Instead of replacing the version will add -$version [default: False] <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/init/","title":"init","text":""},{"location":"reference/commands/init/#usage","title":"Usage","text":"<pre><code>cmf init [options] &lt;projectName&gt; [&lt;rootPackageName&gt; [&lt;workingDir&gt;]]\n</code></pre>"},{"location":"reference/commands/init/#arguments","title":"Arguments","text":"Name Description <code>&lt;projectName&gt;</code> <code>&lt;rootPackageName&gt;</code> [default: Cmf.Custom.Package] <code>&lt;workingDir&gt;</code> Working Directory [default: .]"},{"location":"reference/commands/init/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>-c, --config &lt;config&gt; (REQUIRED)</code> Configuration file exported from Setup [default: ] <code>--deploymentDir &lt;deploymentDir&gt; (REQUIRED)</code> Deployments directory <code>--MESVersion &lt;MESVersion&gt; (REQUIRED)</code> Target MES version <code>--DevTasksVersion &lt;DevTasksVersion&gt; (REQUIRED)</code> Critical Manufacturing dev-tasks version <code>--HTMLStarterVersion &lt;HTMLStarterVersion&gt; (REQUIRED)</code> HTML Starter version <code>--yoGeneratorVersion &lt;yoGeneratorVersion&gt; (REQUIRED)</code> @criticalmanufacturing/html Yeoman generator version <code>--nugetVersion &lt;nugetVersion&gt; (REQUIRED)</code> NuGet versions to target. This is usually the MES version <code>--testScenariosNugetVersion &lt;testScenariosNugetVersion&gt; (REQUIRED)</code> Test Scenarios Nuget Version <code>--infra, --infrastructure &lt;infrastructure&gt;</code> Infrastructure JSON file [default: ] <code>--nugetRegistry &lt;nugetRegistry&gt;</code> NuGet registry that contains the MES packages <code>--npmRegistry &lt;npmRegistry&gt;</code> NPM registry that contains the MES packages <code>--ISOLocation &lt;ISOLocation&gt;</code> MES ISO file [default: ] <code>--nugetRegistryUsername &lt;nugetRegistryUsername&gt;</code> NuGet registry username <code>--nugetRegistryPassword &lt;nugetRegistryPassword&gt;</code> NuGet registry password <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/ls/","title":"ls","text":""},{"location":"reference/commands/ls/#usage","title":"Usage","text":"<pre><code>cmf ls [options] [&lt;workingDir&gt;]\n</code></pre>"},{"location":"reference/commands/ls/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: .]"},{"location":"reference/commands/ls/#options","title":"Options","text":"Name Description <code>-r, --repo, --repos &lt;repos&gt;</code> Repositories where dependencies are located (folder) <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/new/","title":"new","text":""},{"location":"reference/commands/new/#usage","title":"Usage","text":"<pre><code>cmf new [options] [command]\n</code></pre>"},{"location":"reference/commands/new/#options","title":"Options","text":"Name Description <code>--reset</code> Reset template engine. Use this if after an upgrade the templates are not working correctly. <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/new/#commands","title":"Commands","text":"Name Description <code>business &lt;workingDir&gt;</code> [default: ] <code>database &lt;workingDir&gt;</code> [default: ] <code>data &lt;workingDir&gt;</code> [default: ] <code>feature &lt;packageName&gt; &lt;workingDir&gt;</code> [default: ] <code>help &lt;workingDir&gt;</code> [default: ] <code>html &lt;workingDir&gt;</code> [default: ] <code>iot &lt;workingDir&gt;</code> [default: ] <code>securityPortal &lt;workingDir&gt;</code> [default: ] <code>test</code>"},{"location":"reference/commands/new_business/","title":"new business","text":""},{"location":"reference/commands/new_business/#usage","title":"Usage","text":"<pre><code>cmf new business [options] [&lt;workingDir&gt;]\n</code></pre>"},{"location":"reference/commands/new_business/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"reference/commands/new_business/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/new_data/","title":"new data","text":""},{"location":"reference/commands/new_data/#usage","title":"Usage","text":"<pre><code>cmf new data [options] [&lt;workingDir&gt;]\n</code></pre>"},{"location":"reference/commands/new_data/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"reference/commands/new_data/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>--businessPackage &lt;businessPackage&gt;</code> Business package where the Process Rules project should be built [default: ] <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/new_database/","title":"new database","text":""},{"location":"reference/commands/new_database/#usage","title":"Usage","text":"<pre><code>cmf new database [options] [&lt;workingDir&gt;]\n</code></pre>"},{"location":"reference/commands/new_database/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"reference/commands/new_database/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/new_feature/","title":"new feature","text":""},{"location":"reference/commands/new_feature/#usage","title":"Usage","text":"<pre><code>cmf new feature [options] &lt;packageName&gt; [&lt;workingDir&gt;]\n</code></pre>"},{"location":"reference/commands/new_feature/#arguments","title":"Arguments","text":"Name Description <code>&lt;packageName&gt;</code> The Feature package name <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"reference/commands/new_feature/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/new_help/","title":"new help","text":""},{"location":"reference/commands/new_help/#usage","title":"Usage","text":"<pre><code>cmf new help [options] [&lt;workingDir&gt;] [command]\n</code></pre>"},{"location":"reference/commands/new_help/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"reference/commands/new_help/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>--docPkg, --documentationPackage &lt;documentationPackage&gt; (REQUIRED)</code> Path to the MES documentation package <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/new_html/","title":"new html","text":""},{"location":"reference/commands/new_html/#usage","title":"Usage","text":"<pre><code>cmf new html [options] [&lt;workingDir&gt;]\n</code></pre>"},{"location":"reference/commands/new_html/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"reference/commands/new_html/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>--htmlPackage, --htmlPkg &lt;htmlPackage&gt; (REQUIRED)</code> Path to the MES Presentation HTML package <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/new_iot/","title":"new iot","text":""},{"location":"reference/commands/new_iot/#usage","title":"Usage","text":"<pre><code>cmf new iot [options] [&lt;workingDir&gt;] [command]\n</code></pre>"},{"location":"reference/commands/new_iot/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"reference/commands/new_iot/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/new_iot/#commands","title":"Commands","text":"Name Description <code>configuration &lt;path&gt;</code> [default: .] <code>customization &lt;packagePath&gt;</code> [default: .]"},{"location":"reference/commands/new_test/","title":"new test","text":""},{"location":"reference/commands/new_test/#usage","title":"Usage","text":"<pre><code>cmf new test [options]\n</code></pre>"},{"location":"reference/commands/new_test/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/pack/","title":"pack","text":""},{"location":"reference/commands/pack/#description","title":"Description","text":"<p>cmf pack is a package creator for the CM MES developments. It puts files and folders in place so that CM Deployment Framework is able to install them.</p> <p>It is extremely configurable to support a variety of use cases. Most commonly, we use it to pack the developments of CM MES customizations.</p> <p>Run <code>cmf pack -h</code> to get a list of available arguments and options.</p>"},{"location":"reference/commands/pack/#important","title":"Important","text":"<p>cmf pack comes with preconfigured Steps per PackageType to run during the installation. This pre defined steps are assuming a restrict structure during the installation, this can be disabled using the flag <code>isToSetDefaultSteps:false</code> in your <code>cmfpackage.json</code>.</p>"},{"location":"reference/commands/pack/#how-it-works","title":"How it works","text":"<p>When the cmf pack is executed it will search in the working directory, for a <code>cmfpackage.json</code> file, that then is serialized to the CmfPackage this will guarantee that the <code>cmfpackage.json</code> has all the valid and needed fields. Then it will get which is the PackageType, and based on that will generate the package.</p>"},{"location":"reference/commands/pack/#usage","title":"Usage","text":"<pre><code>cmf pack [options] [&lt;workingDir&gt;]\n</code></pre>"},{"location":"reference/commands/pack/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: .]"},{"location":"reference/commands/pack/#options","title":"Options","text":"Name Description <code>-o, --outputDir &lt;outputDir&gt;</code> Output directory for created package [default: Package] <code>-f, --force</code> Overwrite all packages even if they already exists <code>-?, -h, --help</code> Show help and usage information"},{"location":"reference/commands/restore/","title":"restore","text":""},{"location":"reference/commands/restore/#description","title":"Description","text":"<p><code>cmf restore</code> allows fetching development dependencies from Deployment Framework (DF) packages, as an alternative to the stricter NuGet and NPM packages.</p>"},{"location":"reference/commands/restore/#how-it-works","title":"How it works","text":"<p>Running this command, any dependencies defined in <code>cmfpackage.json</code> will be obtained from the configured repositories (either specified via command option or registed in the <code>repositories.json</code> file) and are then unpacked to the <code>Dependencies</code> folder inside the package. Then each solution can add references/link packages from the Dependencies folder.</p>"},{"location":"reference/commands/restore/#usage","title":"Usage","text":"<pre><code>cmf restore [options] &lt;packagePath&gt;\n</code></pre>"},{"location":"reference/commands/restore/#arguments","title":"Arguments","text":"Name Description <code>&lt;packagePath&gt;</code> Package path"},{"location":"reference/commands/restore/#options","title":"Options","text":"Name Description <code>-r, --repo, --repos &lt;repos&gt;</code> Repositories where dependencies are located (folder) <code>-?, -h, --help</code> Show help and usage information"},{"location":"scaffolding/","title":"Scaffolding","text":""},{"location":"scaffolding/#pre-requisites","title":"Pre-requisites","text":"<p>Though <code>@criticalmanufacturing/cli</code> runs with the latest <code>node</code> version, to run scaffolding commands the versions required by the target MES version are mandatory.</p> <p>For MES v10, the recommended versions are:</p> <ul> <li>latest node 18 (Hydrogen)</li> <li>latest npm 9 (should come with node)</li> </ul> <p>For MES v8 and v9, the recommended versions are:</p> <ul> <li>latest node 12 (Erbium)</li> <li>latest npm 6 (should come with node)</li> </ul> <p>Apart from those, scaffolding also needs the following dependencies: <pre><code>npm install -g windows-build-tools\nnpm install -g gulp@3.9.1\nnpm install -g yo@3.1.1\n</code></pre> For MES v10, you will also need angular cli <pre><code>npm install -g @angular/cli\n</code></pre></p>"},{"location":"scaffolding/#nuget-and-npm-repositories","title":"NuGet and NPM repositories","text":"<p>Rarely changing information, possibly sensitive, like NuGet or NPM repositories and respective access credentials are considered infrastructure. More information on how to set up your own is available at Infrastructure</p>"},{"location":"scaffolding/#environment-config","title":"Environment Config","text":"<p>A valid MES installation is required to initialize your repository, either installed via Setup or via DevOps Center. For the Setup: - in the final step of the Setup, click Export to obtain a JSON file with your environment settings For DevOps Center: - Open your environment and click Export Parameters</p> <p>Both these files contain sensitive information, such as user accounts and authentication tokens. They need to be provided to the <code>init</code> command with: <pre><code>cmf init --config &lt;config file.json&gt; --infra...\n</code></pre></p>"},{"location":"scaffolding/#scaffolding-a-repository","title":"Scaffolding a repository","text":"<p>Let's start by cloning the empty repository.</p> <pre><code>git clone https://git.example/repo.git\n</code></pre> <p>Move into the repository folder</p> <pre><code>cd repo\n</code></pre> <p>For a classic project example, check the traditional structure documentation.</p> <p>For more advanced structures, you'll probably be using Features.</p>"},{"location":"scaffolding/#pipelines","title":"Pipelines","text":"<p>By default, our scaffolding doesn't provide any built-in CI/CD pipelines, giving you the flexibility to choose any tool/platform that suits your needs.</p> <p>However, we can share as a reference our internal process:</p>"},{"location":"scaffolding/#pull-requests-prs","title":"Pull Requests (PRs)","text":"<p>For each changed package, we run the command <code>cmf build --test</code>, which compiles the package and runs unit tests if available, comparing with the target branch.</p> <p>We consider a package as \"changed\" when any file is modified inside a folder with a cmfpackage.json file.</p> <p>An alternative is to run <code>cmf build --test</code> for all packages.</p>"},{"location":"scaffolding/#continuous-integration-ci","title":"Continuous Integration (CI)","text":"<p>After merging code into the main branch, we perform the following steps:</p> <ol> <li>Run <code>cmf build --test</code> to ensure successful building of all packages and passing of unit tests.</li> <li>Run <code>cmf pack</code> to generate a package that can be installed via DevOps Center or Critical Manufacturing Setup.</li> </ol>"},{"location":"scaffolding/#continuous-deployment-cd","title":"Continuous Deployment (CD)","text":""},{"location":"scaffolding/#traditional-windows-vms","title":"Traditional (Windows VMs)","text":"<ol> <li>Follow the instructions in the documentation</li> <li>In the Package Sources step, add the path where your packages are located.</li> </ol>"},{"location":"scaffolding/#containers","title":"Containers","text":"<ol> <li>Follow the instructions in the documentation</li> <li>Copy the generated packages to the folder defined in volume Boot Packages.</li> <li>In the Configuration &gt; General Data step, set the Package to Install as <code>RootPackageId@PackageVersion</code></li> </ol>"},{"location":"scaffolding/angular-15-iot-packages/","title":"Angular 15 IoT packages","text":"<p>Version v10 has introduced a dependency between Connect IoT customization and the GUI. This means that the GUI in order to have the Connect IoT customization, will require in compile time access to the same. If you have Connect IoT customization you must have an html package.</p> <p>When generating the Connect IoT customization <code>cmf new iot --htmlPackageLocation Cmf.Custom.Baseline.HTML</code> you will now have to pass a new parameter htmlPackageLocation. This will introduce an entry in the <code>cmfpackage.json</code> of the iot package with the related package. When building or packing the iot package it will now build and and pack the HTML package after building the iot package.</p> <p>The relation between the HTML package will have to be added manually. In order to do this, in your HTML package <code>cmfpackage.json</code> add an entry for Related Package in the <code>cmfpackage.json</code> <pre><code>\"relatedPackages\": [\n{\n    \"path\": \"../Cmf.Custom.Baseline.IoT/Cmf.Custom.Baseline.IoT.Packages\",\n    \"preBuild\": true,\n    \"postBuild\": false,\n    \"prePack\": false,\n    \"postPack\": false\n}]\n</code></pre> In the <code>package.json</code> of the html package add a new entry for the custom iot package. For example, if you created a new library called connect-iot-controller-engine-custom-tasks:</p> <p><pre><code>npm install ../Cmf.Custom.Baseline.IoT/Cmf.Custom.Baseline.IoT.Packages\n</code></pre> This will add this entry in the <code>package.json</code>: <pre><code>\"@criticalmanufacturing/connect-iot-controller-engine-custom-tasks\": \"file:../Cmf.Custom.Baseline.IoT/Cmf.Custom.Baseline.IoT\n</code></pre></p> <p>Finally, add it to the gui <code>app.module.ts</code>:</p> <pre><code>import { Metadata as CustomTasks } from '@criticalmanufacturing/connect-iot-controller-engine-custom-tasks/metadata';\n    MesUIModule.forRoot({\n      tasks: [\n        CustomTasks\n      ]\n    }),\n</code></pre>"},{"location":"scaffolding/infrastructure/","title":"Infrastructure config file","text":"<p>If you work at Critical Manufacturing, there is a CMF-internal.json infra file which specifies our internal infrastructure. It's in the Deployment Services AzureDevOps, COMMON project, Tools repository, at <code>/infrastructure</code>.</p>"},{"location":"scaffolding/infrastructure/#structure","title":"Structure","text":"<p>Information regarding repositories usually don't change very often. For this set of information, <code>init</code> accepts a file with a few keys that specify:</p> <ol> <li>The NPM repository URL</li> <li>The NuGet repository URL</li> </ol>"},{"location":"scaffolding/infrastructure/#usage","title":"Usage","text":"<p>The infrastructure file must be passed to the <code>init</code> command as an argument, e.g.: <pre><code>cmf init --infrastructure &lt;file&gt; --config...\n</code></pre></p>"},{"location":"scaffolding/infrastructure/#example","title":"Example","text":"<pre><code>{\n    \"NPMRegistry\": \"http://local.example/repository/npm\",\n    \"NuGetRegistry\": \"https://local.example/repository/nuget-hosted\",\n    \"NuGetRegistryUsername\": \"user\",\n    \"NuGetRegistryPassword\": \"password\"\n}\n</code></pre>"},{"location":"scaffolding/migrationPaths/","title":"Migration Paths","text":""},{"location":"scaffolding/migrationPaths/#to-3x","title":"To 3x","text":"<p>Default Steps for Business and Data Packages are now inject by the cli. If you are upgrading to cmf-cli 3x you should remove all the steps from the following packages:</p> <ul> <li>Business</li> <li>Data</li> <li>IoTData</li> <li>Tests MasterData</li> </ul>"},{"location":"scaffolding/pkg_exportedobjects/","title":"Exported Objects package","text":"<p>Even though the CLI does not provide scaffolding for an <code>ExportedObjects</code> package, as it generally is better to include these in Master Data packages, it is possible to create such a package and the tool will pack it as with any other package type.</p> <p>As an example, an ExportedObjects package manifest looks like this:</p> <pre><code>{\n  \"packageId\": \"Cmf.Custom.Baseline.ExportedObjects\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Baseline Exported Objects Package\",\n  \"packageType\": \"ExportedObjects\",\n  \"isInstallable\": true,\n  \"isUniqueInstall\": false,\n  \"contentToPack\": [\n    {\n      \"source\": \"$(version)/*\",\n      \"target\": \"ExportedObjects\"\n    }\n  ]\n}\n</code></pre> <p>You would create a <code>cmfpackage.json</code> file inside the objects folder with this content. This will pack any XML file in a folder named after the current package version, so in this case <code>1.0.0</code> and place it in the package file in an <code>ExportedObjects</code> folder.</p> <p>Afterwards, do not forget to add this new package as a dependency of your root/feature package, to make sure it gets installed when required.</p>"},{"location":"scaffolding/feature-package/","title":"Feature package scaffolding","text":"<p>A traditional project structure targets the scenario where one team does all of the development for a project with a single target, e.g. a customization team deploying MES to a single factory or a set of factories with the exact same customization.</p> <p>However, some projects are more complex. A single team can target a multi-site deployment in which the sites target a set of common features, but complement them with site-specific features, or the common features need site-specific data packages to configure them.</p> <p>In these cases, projects are usually structured in a Feature Packages arrangement, in that some packages are self-contained, or in a Layered Project arrangement, in which e.g. a Site package, which is specific to a given site/plant, depends on a Core/Baseline package, which is common among all sites.</p> <p><code>cmf new</code> allows assembling these package in whatever structure is necessary, with a few limitations: - the test solution is always at the repository level, i.e. we do not have feature-level test packages - you cannot mix traditional packages, which exist in the repository root, with these packages - a feature package must always exist inside a global repository</p> <p><code>cmf new</code> will automatically register each package as a dependency of its parent (as per the folder structure).</p>"},{"location":"scaffolding/feature-package/#initialize-the-repository","title":"Initialize the Repository","text":"<p>In case we are creating the first package in the repository, we need to initialize it in the same way as we do for a traditional project. Check the Initialize the repository section of the traditional scaffolding instructions.</p>"},{"location":"scaffolding/feature-package/#creating-a-feature-package","title":"Creating a Feature Package","text":"<p>A Feature Package is a metapackage that can include one or more layer packages, e.g. we can have a Feature package that includes only a Business package.</p> <p>A Feature package should include all necessary layer packages (business, UI, Help) needed for the Feature to work.</p> <p>To create a new Feature Package, run the <code>new feature</code> command at your repository root, specifying the new package name: e.g. to create the Baseline package for your project, run:</p> <pre><code>cmf new feature Cmf.Custom.Baseline \n</code></pre> <p>The new feature package will be available in your repository at <code>Features\\Cmf.Custom.Baseline</code>.</p> <p>After creating a Feature package, it is not longer possible to create new layer packages in the repository root. Any <code>new</code> command for a layer package will fail:</p> <pre><code>&gt; cmf new html\n  Cannot create a root-level layer package when features already exist.\n</code></pre>"},{"location":"scaffolding/feature-package/#creating-layer-packages-in-a-feature-package","title":"Creating Layer packages in a Feature package","text":"<p>Creating layer packages works exactly in the same way as for a traditional project, but the <code>cmf new</code> command should run from inside the feature package:</p> <pre><code>&gt; cd Features/Cmf.Custom.Baseline\n&gt; cmf new business\nThe template \"Business Package\" was created successfully.\n</code></pre> <p>The layer package name will include the feature package name fragment to distinguish it from other packages in the same repository.</p>"},{"location":"scaffolding/post-scaffolding-tailoring/","title":"Post-scaffolding package tailoring","text":"<p>The packages generated by <code>cmf new</code> are as neutral as possible, so to be compatible with as many deployment scenarios as possible. However, some tailoring is advised for specific targets. This tailoring allows the packages to better adapt to their deployment target, eliminating the need of manual steps when installing.</p> <p>Below are some tailoring options for specific targets. It's recommended that these changes are applied according to your target environment.</p>"},{"location":"scaffolding/post-scaffolding-tailoring/#to-version-3x","title":"to version 3x:","text":"ContainersDeployment Framework <ul> <li>Tests MasterData Package<ul> <li>Add the property <pre><code>\"isToSetDefaultSteps\": false\n</code></pre></li> </ul> </li> </ul> <ul> <li>Business Package<ul> <li>Remove steps:   <pre><code>\"steps\": [\n    { \"order\": 1, \"type\": \"Generic\", \"onExecute\": \"$(Agent.Root)/agent/scripts/stop_host.ps1\" },\n    { \"order\": 2, \"type\": \"DeployFiles\", \"ContentPath\": \"**/!(Cmf.Custom.*.BusinessObjects*).dll\" },\n    { \"order\": 3, \"type\": \"Generic\", \"onExecute\": \"$(Agent.Root)/agent/scripts/start_host.ps1\" }\n]\n</code></pre></li> </ul> </li> <li>Data, IoTData and Tests MasterData Package<ul> <li>Remove steps:   <pre><code>\"steps\": [\n    { \"order\": 1, \"type\": \"Generic\", \"onExecute\": \"$(Agent.Root)/agent/scripts/stop_host.ps1\" },\n    { \"order\": 2, \"type\": \"TransformFile\", \"file\": \"Cmf.Foundation.Services.HostService.dll.config\", \"tagFile\": true },\n    { \"order\": 3, \"type\": \"Generic\", \"onExecute\": \"$(Agent.Root)/agent/scripts/start_host.ps1\" },\n    { \"order\": 4, \"type\": \"DeployFiles\", \"ContentPath\": \"GenerateLBOs.ps1\" },\n    { \"order\": 5, \"type\": \"Generic\", \"onExecute\": \"$(Package[Cmf.Custom.Package].TargetDirectory)/GenerateLBOs.ps1\" }\n]\n</code></pre></li> </ul> </li> </ul>"},{"location":"scaffolding/post-scaffolding-tailoring/#to-version-2x","title":"to version 2x:","text":"ContainersDeployment Framework <ul> <li>Root Package<ul> <li>Add to dependencies <pre><code>\"dependencies\": [\n    { \"id\": \"Cmf.Environment\", \"version\": \"8.3.0\" }\n]\n</code></pre></li> </ul> </li> <li>Business Package<ul> <li>Add to steps: <pre><code>\"steps\": [\n    { \"order\": \"1\", \"type\": \"DeployFiles\", \"ContentPath\": \"**/!(Cmf.Custom.*.BusinessObjects*).dll\" }\n]\n</code></pre></li> </ul> </li> </ul> <ul> <li>Root and IoT Root Package<ul> <li>Add to dependencies   <pre><code>\"dependencies\": [\n    { \"id\": \"CriticalManufacturing.DeploymentMetadata\", \"version\": \"8.3.0\" }\n]\n</code></pre></li> </ul> </li> <li>Business Package<ul> <li>Add to steps:   <pre><code>\"steps\": [\n    { \"order\": 1, \"type\": \"Generic\", \"onExecute\": \"$(Agent.Root)/agent/scripts/stop_host.ps1\" },\n    { \"order\": 2, \"type\": \"DeployFiles\", \"ContentPath\": \"**/!(Cmf.Custom.*.BusinessObjects*).dll\" },\n    { \"order\": 3, \"type\": \"Generic\", \"onExecute\": \"$(Agent.Root)/agent/scripts/start_host.ps1\" }\n]\n</code></pre></li> </ul> </li> <li>Data, IoTData and Tests MasterData Package<ul> <li>Add to steps:   <pre><code>\"steps\": [\n    { \"order\": 1, \"type\": \"Generic\", \"onExecute\": \"$(Agent.Root)/agent/scripts/stop_host.ps1\" },\n    { \"order\": 2, \"type\": \"TransformFile\", \"file\": \"Cmf.Foundation.Services.HostService.dll.config\", \"tagFile\": true },\n    { \"order\": 3, \"type\": \"Generic\", \"onExecute\": \"$(Agent.Root)/agent/scripts/start_host.ps1\" },\n    { \"order\": 4, \"type\": \"DeployFiles\", \"ContentPath\": \"GenerateLBOs.ps1\" },\n    { \"order\": 5, \"type\": \"Generic\", \"onExecute\": \"$(Package[Cmf.Custom.Package].TargetDirectory)/GenerateLBOs.ps1\" }\n]\n</code></pre></li> </ul> </li> </ul> <p>Note</p> <p>Make sure that the order of the steps is the same referenced in this document.</p>"},{"location":"scaffolding/traditional/","title":"Traditional scaffolding","text":"<p>A \"traditional project\" does not contain feature packages, is developed entirely by one team in one repository and is delivered directly to one customer.</p> <p>These projects are usually composed of Business, UI, Help and Master Data customization, with optionally Exported Objects and IoT.</p> <p>Please consult each commands help page for details of what each switch does.</p>"},{"location":"scaffolding/traditional/#initialize-the-repository","title":"Initialize the repository","text":"<p>These types of projects usually fully own their git repository and as such need to be initialized to obtain the base repo structure.</p> <p>This is done with the <code>cmf init</code> command:</p> MES v10up to MES v9 <pre><code>cmf init ExampleProject `\n    --infra ..\\infrastructure\\infra.json `\n    --config ..\\config\\ExampleEnvironment.json `\n    --MESVersion 10.0.0 `\n    --ngxSchematicsVersion 10.0.0 `\n    --nugetVersion 10.0.0 `\n    --testScenariosNugetVersion 10.0.0 `\n    --deploymentDir \\\\directory\\Deployments `\n    --ISOLocation \\\\directory\\CriticalManufacturing.iso `\n    --version 1.0.0\n</code></pre> <pre><code>cmf init ExampleProject `\n    --infra ..\\infrastructure\\infra.json `\n    --config ..\\config\\ExampleEnvironment.json `\n    --MESVersion 9.0.11 `\n    --DevTasksVersion 9.0.4 `\n    --HTMLStarterVersion 8.0.0 `\n    --yoGeneratorVersion 8.1.1 `\n    --nugetVersion 9.0.11 `\n    --testScenariosNugetVersion 9.0.11 `\n    --deploymentDir \\\\vm-project.criticalmanufacturing.com\\Deployments `\n    --ISOLocation \\\\setups\\CriticalManufacturing.iso `\n    --version 1.0.0 `\n</code></pre> <p>Note: The <code>`</code> character escapes multiline commands in <code>powershell</code>. For bash, the <code>\\</code> character does the same thing.</p> <p>The infrastructure file specifies the repositories to be used to get the project dependencies. You will need to create this infrastructure file first. Check Infrastructure for more details.</p> <p>As in previous scenarios, the versions for the various input options must be previously determined. <code>cmf init</code> will not assume default/current values for these options.</p> <p>This will also create a root package, which may or may not be shipped to the customer. This root package has no dependencies, initially. Each time a layer package is created, it will be registered in the higher level package found. For a traditional repository, this will be the root package.</p> <p>If you are currently using version cmf-cli version 2x, follow the instructions defined in the Post-scaffolding package tailoring. You will not be able to generate the layer packages before doing this. In version 3, this is already done by the CLI.</p>"},{"location":"scaffolding/traditional/#layer-packages","title":"Layer packages","text":"<p>Each application layer is deployed in a different package. This allows the team to deliver only what was actively modified during a sprint, and keep the previous versions of the unchanged layers in an installed system.</p>"},{"location":"scaffolding/traditional/#business","title":"Business","text":"<p>The business package is straightforward and is generated with the <code>cmf new business</code> command:</p> <pre><code>cmf new business --version 1.0.0\n</code></pre> <p>This creates a .NET solution for backend development. Actions project is not included in the business solution.</p>"},{"location":"scaffolding/traditional/#master-data","title":"Master Data","text":"<p>The Master Data package includes also the Exported Objects. Exported Objects are loaded via Master Data and not using a specific ExportedObjects sub-package.</p> <p>As the Master Data package also includes the Process Rules, it can optionally register the Actions package in a specific Business solution. For the traditional scenario, the command would be:</p> <pre><code>cmf new data --version 1.0.0 --businessPackage .\\Cmf.Custom.Business\\\n</code></pre>"},{"location":"scaffolding/traditional/#ui","title":"UI","text":"MES v10up to MES v9 <p>The html and help packages are straightforward and are generated with the <code>cmf new html</code> and <code>cmf new help</code> commands:</p> <p>The corresponding commands are:</p> <p>To fully scaffold UI and Help solutions, the corresponding Deployment Framework package needs to be specified. These can be found in the MES ISO/disk. Make sure you use the correct version: a mismatch may cause all kinds of problems when running.</p> <p>The corresponding commands are:</p>"},{"location":"scaffolding/traditional/#html","title":"HTML","text":"<pre><code>cmf new html --version 1.0.0\n</code></pre> <p>If you require NPM registry authentication, the current procedure is to include the auth information in the apps\\customization.web.npmrc file as is standard.</p>"},{"location":"scaffolding/traditional/#help","title":"Help","text":"<pre><code>cmf new help --version 1.0.0\n</code></pre>"},{"location":"scaffolding/traditional/#html_1","title":"HTML","text":"<pre><code>cmf new html --version 1.0.0 --htmlPackage H:\\packages\\Cmf.Presentation.HTML.9.1.8.zip\n</code></pre> <p>If you require NPM registry authentication, the current procedure is to include the auth information in the apps\\customization.web.npmrc file as is standard.</p>"},{"location":"scaffolding/traditional/#help_1","title":"Help","text":"<pre><code>cmf new help --version 1.0.0 --documentationPackage H:\\packages\\Cmf.Documentation.9.1.8.zip\n</code></pre>"},{"location":"scaffolding/traditional/#iot","title":"IoT","text":"MES v10up to MES v9 <p>The IoT package contains both IoTData and IoTPackages as sub-packages. They are always created together. <pre><code>cmf new iot --version 1.0.0 --htmlPackageLocation Cmf.Custom.Baseline.HTML\n</code></pre> Make sure to follow all the steps here. Otherwise you can have unexpected errors in the package.</p> <p>The IoT package contains both IoTData and IoTPackages as sub-packages. They are always created together. <pre><code>cmf new iot --version 1.0.0\n</code></pre></p>"},{"location":"scaffolding/traditional/#database","title":"Database","text":"<p>The database package contains both Pre, Post and Reporting sub-packages. <pre><code>cmf new database --version 1.0.0\n</code></pre></p>"},{"location":"scaffolding/traditional/#tests","title":"Tests","text":"<p>The tests package is generated and built like any other layer package, but it is not installable. It is also not usually delivered to customers, unless requested. <pre><code>cmf new test --version 1.0.0\n</code></pre></p>"},{"location":"scaffolding/traditional/#demo","title":"Demo","text":"<p>This demo show the usual initial setup for a new project. For the first sprints, which focus heavily on modelling, the Data package is of the most importance. Obviously a Tests package is also needed. As an extra, the Business package is also initialized. This allows the Process Rules in the Data package to have a .NET solution where they can be compiled for checking.</p> <p>Note that the GIF is quite large and can take a bit to load.</p> <p></p>"}]}